#BlueJ class context
comment0.target=Racional
comment0.text=\ \n\ La\ clase\ Racional\ es\ la\ clase\ de\ los\ n\u00FAmeros\ de\ la\ forma\ a/b\n\ donde\ a\ y\ b\ son\ de\ tipo\ int\n\ Cuenta\ con\ varios\ tipos\ de\ m\u00E9todo\ Constructor\n\ Adem\u00E1s\ cuenta\ con\ m\u00E9todo\ para\ llevar\ a\ cabo\ las\ operaciones\:\n\ suma,\ resta,\ multiplicacion\ y\ division\ \n\ Un\ m\u00E9todo\ privado\ importante\ para\ la\ validaci\u00F3n\ e\ inicializaci\u00F3n\n\ de\ par\u00E1metros\ llamado\ _init(\ int\ numerador,\ int\ denominador)\n\ que\ debe\ verificar\ que\ el\ denominador\ nunca\ sea\ 0\ y\ que\n\ al\ inicializar\ el\ Racional\ quede\ en\ su\ forma\ simplificada\n\ Adem\u00E1s\ un\ m\u00E9todo\ privado\ para\ simplificar()\ el\ Racional\n\ y\ un\ m\u00E9todo\ privado\ llamado\ maximoComunDivisor(int\ x,\ int\ y)\ \n\ que\ puede\ ser\ \u00FAtil\ para\ programar\ la\ simplificaci\u00F3n.\n\ \n
comment1.params=
comment1.target=Racional()
comment1.text=\ \n\ El\ primer\ constructor\ por\ omisi\u00F3n\ no\ recibe\ parametros\n\ crea\ un\ Racional\ equivalente\ al\ 0\ ,\ recuerde\ que\n\ denominador\ no\ puede\ ser\ igual\ a\ 0.\n
comment10.params=otro
comment10.target=Racional\ dividir(Racional)
comment10.text=\n\ Efectua\:\ Crea,\ calcula\ y\ retorna\ una\ nueva\ instancia\ de\ Racional\ con\ la\ division\ dos\ numeros\ racionales\n\ @param\ otro\ \ Racional\ divisor\ que\ divide\ al\ Racional\ al\ que\ se\ le\ aplica\ el\ m\u00E9todo\n\ @return\ Racional\ producto\ de\ la\ division,\ debidamente\ simplificado\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\n\ Efectua\:\ Retorna\ un\ String\ con\ una\ representaci\u00F3n\ del\ a\ forma\n\ n\ /\ d\ del\ Racional.\ Por\ ejemplo\:\ "7/3"\ (\ y\ se\ omite\ el\ divisor\ si\ es\ 1)\n\ Por\ ejemplo,\ si\ numerador\ es\ 12\ y\ denominador\ 1\ ser\u00E1\:\ "12"\n\ @return\ salida\ la\ salida\ es\ un\ string\ con\ el\ formato\ solicitado\n
comment12.params=x\ y
comment12.target=int\ maximoComunDivisor(int,\ int)
comment12.text=\n\ M\u00E9todo\ utilitario\ que\ calcula\ el\ maximo\ com\u00FAn\ divisor\ de\ dos\n\ n\u00FAmeros\ y\ returna\ su\ valor\n\ @param\ x\ Primer\ n\u00FAmero\ entero\n\ @param\ y\ Segundo\ n\u00FAmero\ entero\n\ @return\ int\ m\u00E1ximo\ com\u00FAn\ divisor\ de\ los\ valores\:\ x\ y\n\ UN\ EJERCICIO\ INTERESANTE\ EST\u00C1\ EN\ EN\ LIBRO\ Y\ ES\ PROGRAMAR\ ESTE\n\ M\u00C9TODO\ EN\ FORMA\ RECURSIVA\n
comment13.params=numerador\ denominador
comment13.target=void\ _init(int,\ int)
comment13.text=\n\ M\u00E9todo\ privado\ para\ inicializar\ los\ valores\ de\ numerador\ y\ denominador\n\ Esto\ se\ hace\ en\ varios\ m\u00E9todos\ por\ lo\ que\ es\ mejor\ programarlo\ aparte\n\ e\ invocarlo\ para\ "modularizar"\ el\ c\u00F3digo,\ es\ como\ sacar\ el\ c\u00F3digo\n\ com\u00FAn\ para\ no\ repetirlo\ a\ lo\ largo\ del\ c\u00F3digo.\n\ Note\ que\ la\ asignaci\u00F3n\ del\ numerador\ y\ denominador\ no\ es\ independiente\n\ ya\ que\ si\ los\ valores\ se\ pueden\ simplificar\ hay\ que\ hacerlo\ y\ se\ debe\n\ controlar\ que\ el\ denominador\ nunca\ sea\ 0\ al\ inicalizar\ un\ Racional.\n
comment14.params=
comment14.target=void\ simplificar()
comment14.text=\n\ M\u00E9todo\ privado\ para\ simplificar\ un\ Racional\n
comment2.params=otro
comment2.target=Racional(Racional)
comment2.text=\ \n\ Constructor\ por\ Copia\ que\ recibe\ como\ para\ metro\ un\ racional\n\ crea\ una\ copia\ del\ Racional\ que\ recibe\ como\ par\u00E1metro\n\ @param\ Racional\ N\u00FAmero\ Racional\ para\ crear\ uno\ con\ los\ mismos\ valores\n
comment3.params=numerador
comment3.target=Racional(int)
comment3.text=\ \n\ Constructor\ que\ recibe\ solo\ el\ numerador\ entero\n\ @param\ numerador\ Se\ usa\ para\ crear\ un\ Racional\ de\ la\ forma\ N/1\n
comment4.params=numerador\ denominador
comment4.target=Racional(int,\ int)
comment4.text=\ \n\ Constructor\ con\ par\u00E1metros\ recibe\ como\ par\u00E1metros\ dos\ enteros\n\ @param\ numerador\ este\ numerador\ va\ ha\ ser\ la\ parte\ de\ arriba\ de\ la\ fracci\u00F3n\n\ @param\ denominador\ este\ \ denominador\ va\ ha\ se\ la\ parte\ de\ abajo\ de\ la\ fracci\u00F3n\n
comment5.params=
comment5.target=int\ getNumerador()
comment6.params=
comment6.target=int\ getDenominador()
comment7.params=otro
comment7.target=Racional\ mas(Racional)
comment7.text=\n\ Efectua\:\ Crea,\ calcula\ y\ retorna\ una\ nueva\ instancia\ de\ Racional\ con\ la\ Suma\ del\n\ la\ instancia\ a\ la\ que\ se\ le\ aplica\ el\ m\u00E9todo\ y\ el\ Racional\ que\ se\ recibe\ como\ par\u00E1metro\n\ \n\ @param\ Racional\ para\ sumarlo\ con\ el\ racional\ al\ que\ se\ le\ aplica\ el\ metodo\n\ @return\ Racional\ producto\ de\ la\ suma,\ ya\ simplificado\n
comment8.params=otro
comment8.target=Racional\ menos(Racional)
comment8.text=\n\ Efectua\:\ Crea,\ calcula\ y\ retorna\ una\ nueva\ instancia\ de\ Racional\ con\ la\ Resta\n\ de\ dos\ numeros\ racionales\n\ @param\ Racional\ que\ se\ resta\ del\ Racional\ al\ que\ se\ le\ aplica\ el\ m\u00E9todo\ \n\ @return\ Racional\ producto\ de\ la\ resta,\ en\ su\ minima\ expresion\ ya\ simplificado\n
comment9.params=otro
comment9.target=Racional\ multiplicar(Racional)
comment9.text=\n\ Efectua\:\ Crea,\ calcula\ y\ retorna\ una\ nueva\ instancia\ de\ Racional\ con\ la\ multiplicaci\u00F3n\ de\ dos\ n\u00FAmeros\ racionales\n\ @param\ otro\ Segundo\ factor\ Racional\ de\ la\ multiplicacion\ para\ multiplicar\ por\ el\ Racional\ al\ que\ se\ le\ aplica\ el\ m\u00E9todo\n\ @return\ Racional\ producto\ de\ la\ multiplicacion\ simplificado\n
numComments=15
